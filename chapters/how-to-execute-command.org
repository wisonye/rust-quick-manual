* How to execute command

#+BEGIN_SRC rust
  fn execute_command(cmd: &mut std::process::Command) {
      //
      // Get all command args
      //
      let mut cmd_vec = cmd.get_args().collect::<Vec<&std::ffi::OsStr>>();

      //
      // Insert the program name into `cmd_vec`
      //
      cmd_vec.insert(0, cmd.get_program());

      //
      // Get back a cmd string
      //
      let cmd_desc = cmd_vec.join(std::ffi::OsStr::new(" "));

      //
      // Executes the command as a child process, waiting for it to finish
      // and collecting all of its output.
      //
      let result = cmd.output();
      match result {
          Ok(output) => {
              println!(
          ">>> [ execute_command ] - {{\n\tcmd: {:?},\n\texit code: {:?},\n\tis success: {},\n\tresult: \n{}}}",
                  cmd_desc,
          output.status.code(),
          output.status.success(),
          String::from_utf8(output.stdout).unwrap().as_str(),
      );
          }
          Err(e) => {
              println!(
                  ">>> [ execute_command ] - {{\n\tcmd: {:?},\n\terror: {:?}\n}}",
                  cmd_desc, e,
              );
          }
      }
  }
#+END_SRC


Examples to call =execute_command= to run the given commands:

#+BEGIN_SRC rust
  ///
  /// Success case
  ///
  fn list_files_in_dir(dir: &str) {
      // let status = std::process::Command::new("/bin/ls")
      //     .args(["-lht", dir])
      //     .status()
      //     .expect("failed to execute process");

      // println!("process finished with: {status}");

      let mut cmd = std::process::Command::new("ls");
      cmd.args(["-lht", dir]);

      execute_command(&mut cmd);
  }

  list_files_in_dir("./");
  // list_files_in_dir("/Users/wison/temp");
  // list_files_in_dir("~/");

  ///
  /// Fail case
  ///
  fn run_a_fail_command() {
      let mut cmd = std::process::Command::new("aaa");
      cmd.args(["-xxx"]);

      execute_command(&mut cmd);
  }

  run_a_fail_command();
#+END_SRC


Execute output:

#+BEGIN_SRC bash
  >>> [ execute_command ] - {
          cmd: "ls -lht ./",
          exit code: Some(0),
          is success: true,
          result: 
  total 16
  drwxr-xr-x  3 wison  staff    96B 28 Feb 22:14 src
  drwxr-xr-x@ 6 wison  staff   192B 31 Jan 07:59 target
  -rw-r--r--  1 wison  staff   148B 31 Jan 07:31 Cargo.lock
  -rw-r--r--  1 wison  staff   173B 31 Jan 07:31 Cargo.toml
  }

  >>> [ execute_command ] - {
          cmd: "aaa -xxx",
          error: Os { code: 2, kind: NotFound, message: "No such file or directory" }
  }
#+END_SRC

